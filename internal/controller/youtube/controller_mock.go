// Code generated by MockGen. DO NOT EDIT.
// Source: controller.go
//
// Generated by this command:
//
//	mockgen -source=controller.go -package=youtube -destination=./controller_mock.go
//

// Package youtube is a generated GoMock package.
package youtube

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIGetInfoController is a mock of IGetInfoController interface.
type MockIGetInfoController struct {
	ctrl     *gomock.Controller
	recorder *MockIGetInfoControllerMockRecorder
	isgomock struct{}
}

// MockIGetInfoControllerMockRecorder is the mock recorder for MockIGetInfoController.
type MockIGetInfoControllerMockRecorder struct {
	mock *MockIGetInfoController
}

// NewMockIGetInfoController creates a new mock instance.
func NewMockIGetInfoController(ctrl *gomock.Controller) *MockIGetInfoController {
	mock := &MockIGetInfoController{ctrl: ctrl}
	mock.recorder = &MockIGetInfoControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGetInfoController) EXPECT() *MockIGetInfoControllerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockIGetInfoController) Run(ctx context.Context, in *GetInfoControllerInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockIGetInfoControllerMockRecorder) Run(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockIGetInfoController)(nil).Run), ctx, in)
}
