// Code generated by MockGen. DO NOT EDIT.
// Source: get_info.go
//
// Generated by this command:
//
//	mockgen -source=get_info.go -package=youtube -destination=./get_info_mock.go
//

// Package youtube is a generated GoMock package.
package youtube

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIGetInfoUseCase is a mock of IGetInfoUseCase interface.
type MockIGetInfoUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIGetInfoUseCaseMockRecorder
	isgomock struct{}
}

// MockIGetInfoUseCaseMockRecorder is the mock recorder for MockIGetInfoUseCase.
type MockIGetInfoUseCaseMockRecorder struct {
	mock *MockIGetInfoUseCase
}

// NewMockIGetInfoUseCase creates a new mock instance.
func NewMockIGetInfoUseCase(ctrl *gomock.Controller) *MockIGetInfoUseCase {
	mock := &MockIGetInfoUseCase{ctrl: ctrl}
	mock.recorder = &MockIGetInfoUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGetInfoUseCase) EXPECT() *MockIGetInfoUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockIGetInfoUseCase) Execute(ctx context.Context, in *GetInfoUseCaseInput) (*GetInfoUseCaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, in)
	ret0, _ := ret[0].(*GetInfoUseCaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockIGetInfoUseCaseMockRecorder) Execute(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockIGetInfoUseCase)(nil).Execute), ctx, in)
}
