// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -package=youtube -destination=./service_mock.go
//

// Package youtube is a generated GoMock package.
package youtube

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	youtube "google.golang.org/api/youtube/v3"
)

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
	isgomock struct{}
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// FindVideosByChannelID mocks base method.
func (m *MockIService) FindVideosByChannelID(id string) ([]*youtube.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVideosByChannelID", id)
	ret0, _ := ret[0].([]*youtube.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindVideosByChannelID indicates an expected call of FindVideosByChannelID.
func (mr *MockIServiceMockRecorder) FindVideosByChannelID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVideosByChannelID", reflect.TypeOf((*MockIService)(nil).FindVideosByChannelID), id)
}
